/* Modulare Arithmetik bewahrt algebraische Äquivalenzen,
   auch in der Nähe des Wrap-Around bei int_max
 */

#use <conio>
#use <util>

int main() {
  int w  = 500;   /* "gefährlicher" Bereich: [int_max-w, int_max+w-1] */
  int x0 = int_max() - w;       /* drei Integers nahe des Wrap-Around */
  int y0 = int_max() - w;
  int z0 = int_max() - w;

  int i;
  int j;
  int k;

  /* Teste Assoziativität der Addition
     im Bereich [int_max-w, int_max+w-1] */
  i = 0;
  while (i < 2*w) {
    int x = x0 + i;   /* NB: Wrap-Around bei i == w */
    j = 0;
    while (j < 2*w) {
      int y = y0 + j;
      k = 0;
      while (k < 2*w) {
        int z = z0 + k;
        /* assert(): Programmabbruch bei Verletzung des Prädikates */
        assert((x + y) + z == x + (y + z));
        k = k + 1;
      }
      j = j + 1;
    }
    i = i + 1;
  }

  return 0;
}
